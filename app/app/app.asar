        Ãº  {"files":{"appSettings.js":{"size":656,"offset":"0","integrity":{"algorithm":"SHA256","hash":"9cf2918e53433208c65a7f453a2ba90c0cdfd1dfc0812ce0343e4c39b9b34162","blockSize":4194304,"blocks":["9cf2918e53433208c65a7f453a2ba90c0cdfd1dfc0812ce0343e4c39b9b34162"]}},"asarUpdate.js":{"size":750,"offset":"656","integrity":{"algorithm":"SHA256","hash":"1921a6ce4ac4d3ae0cbd90fbff151898f2194e54e82a997da100308b96b37577","blockSize":4194304,"blocks":["1921a6ce4ac4d3ae0cbd90fbff151898f2194e54e82a997da100308b96b37577"]}},"autoStart.js":{"size":1581,"offset":"1406","integrity":{"algorithm":"SHA256","hash":"423e47e3520ed3b8e26a1b906145eef6c9bfc8bb63c844b05cb4afd863e49a15","blockSize":4194304,"blocks":["423e47e3520ed3b8e26a1b906145eef6c9bfc8bb63c844b05cb4afd863e49a15"]}},"bootstrap.js":{"size":3176,"offset":"2987","integrity":{"algorithm":"SHA256","hash":"089dff2239f552eda4620ebc1e6ff4f1d9ad6d17cbd2334d8c1c14f7d9cfa964","blockSize":4194304,"blocks":["089dff2239f552eda4620ebc1e6ff4f1d9ad6d17cbd2334d8c1c14f7d9cfa964"]}},"cmdSwitches.js":{"size":1045,"offset":"6163","integrity":{"algorithm":"SHA256","hash":"d5ecbc25ea1fb99df6a9e3b9333e2303a363f575d210afccfebc8595f5810825","blockSize":4194304,"blocks":["d5ecbc25ea1fb99df6a9e3b9333e2303a363f575d210afccfebc8595f5810825"]}},"config":{"files":{"index.js":{"size":673,"offset":"7208","integrity":{"algorithm":"SHA256","hash":"9d159815cd12472fe1187d34d51d7f51db9d5b318a5db4588bea89c01feab707","blockSize":4194304,"blocks":["9d159815cd12472fe1187d34d51d7f51db9d5b318a5db4588bea89c01feab707"]}},"preload.js":{"size":232,"offset":"7881","integrity":{"algorithm":"SHA256","hash":"3da5e932723ef2089e20db158e5e3b41e4825257350897db203932c065e4d443","blockSize":4194304,"blocks":["3da5e932723ef2089e20db158e5e3b41e4825257350897db203932c065e4d443"]}}}},"Constants.js":{"size":508,"offset":"8113","integrity":{"algorithm":"SHA256","hash":"512737c56e3ce5a3a77e7017bf9cc820c4b80d6e74e3c0f706eb0f237c23adea","blockSize":4194304,"blocks":["512737c56e3ce5a3a77e7017bf9cc820c4b80d6e74e3c0f706eb0f237c23adea"]}},"index.js":{"size":1014,"offset":"8621","integrity":{"algorithm":"SHA256","hash":"c4008b5a933458551402bc129ce9b618666a29823249346bdad417c4ec89e2cd","blockSize":4194304,"blocks":["c4008b5a933458551402bc129ce9b618666a29823249346bdad417c4ec89e2cd"]}},"mainWindow.js":{"size":2553,"offset":"9635","integrity":{"algorithm":"SHA256","hash":"fac83a558610389bf77a5f75da6382644f1eff73bed545e4d6686709c9bb72c8","blockSize":4194304,"blocks":["fac83a558610389bf77a5f75da6382644f1eff73bed545e4d6686709c9bb72c8"]}},"package.json":{"size":36,"offset":"12188","integrity":{"algorithm":"SHA256","hash":"1acefc2925dc5e120030909109530b55ed89f8de40d04a430e09fcda22b44bbc","blockSize":4194304,"blocks":["1acefc2925dc5e120030909109530b55ed89f8de40d04a430e09fcda22b44bbc"]}},"paths.js":{"size":1000,"offset":"12224","integrity":{"algorithm":"SHA256","hash":"53ef28a0ee97dc838c3e1b2d5486c8a8a436c50564fb3e04db4e152832a9249e","blockSize":4194304,"blocks":["53ef28a0ee97dc838c3e1b2d5486c8a8a436c50564fb3e04db4e152832a9249e"]}},"splash":{"files":{"index.js":{"size":3900,"offset":"13224","integrity":{"algorithm":"SHA256","hash":"20911a6ef7a289f318ca4c79d3323d8c98e47f7a19ae88ccf063c5cb01fda7f0","blockSize":4194304,"blocks":["20911a6ef7a289f318ca4c79d3323d8c98e47f7a19ae88ccf063c5cb01fda7f0"]}},"preload.js":{"size":231,"offset":"17124","integrity":{"algorithm":"SHA256","hash":"d977d32c96830c41f84e3619a642f150b8c44a3d1c05c2f3e9efc9bf5c7ce898","blockSize":4194304,"blocks":["d977d32c96830c41f84e3619a642f150b8c44a3d1c05c2f3e9efc9bf5c7ce898"]}}}},"updater":{"files":{"moduleUpdater.js":{"size":5321,"offset":"17355","integrity":{"algorithm":"SHA256","hash":"d5740c21d931ec0c8c3521d6272c51bdb12d383c2f6f9ca74e284c74bcad62a7","blockSize":4194304,"blocks":["d5740c21d931ec0c8c3521d6272c51bdb12d383c2f6f9ca74e284c74bcad62a7"]}},"updater.js":{"size":7797,"offset":"22676","integrity":{"algorithm":"SHA256","hash":"4a3db4ee3db7c97ff81df4557080fa04a40141713b647a8cfd0e375029d0db8e","blockSize":4194304,"blocks":["4a3db4ee3db7c97ff81df4557080fa04a40141713b647a8cfd0e375029d0db8e"]}}}},"utils":{"files":{"buildInfo.js":{"size":124,"offset":"30473","integrity":{"algorithm":"SHA256","hash":"bdfbc04a3f579991e9f0bd88f4eef56aff4e4c6aac0899bf22280ab01832ee42","blockSize":4194304,"blocks":["bdfbc04a3f579991e9f0bd88f4eef56aff4e4c6aac0899bf22280ab01832ee42"]}},"win.js":{"size":525,"offset":"30597","integrity":{"algorithm":"SHA256","hash":"dd398abeaa23b6f01fcd86d97eda678b10df4d75fffe983f63f00ff5597b4a38","blockSize":4194304,"blocks":["dd398abeaa23b6f01fcd86d97eda678b10df4d75fffe983f63f00ff5597b4a38"]}}}},"winFirst.js":{"size":676,"offset":"31122","integrity":{"algorithm":"SHA256","hash":"d2c56841cff9b0fcfb97f1b4d356c52b18968b33bf07d7a3a9ccb85f1ac8d92a","blockSize":4194304,"blocks":["d2c56841cff9b0fcfb97f1b4d356c52b18968b33bf07d7a3a9ccb85f1ac8d92a"]}}}}  const fs=require('fs');class Settings{constructor(path){try{this.store=JSON.parse(fs.readFileSync(path));}catch{this.store={};}this.path=path;this.mod=this.getMod();log('Settings',this.path,this.store);}getMod(){try{return fs.statSync(this.path).mtime.getTime();}catch{}}get(k,d){return this.store[k]??d;}set(k,v){this.store[k]=v;}save(){if(this.mod&&this.mod!==this.getMod())return;try{fs.writeFileSync(this.path,JSON.stringify(this.store,null,2));this.mod=this.getMod();log('Settings','Saved');}catch(e){log('Settings',e);}}}let inst;exports.getSettings=()=>inst=inst??new Settings(require('path').join(require('./paths').getUserData(),'settings.json'));const {get}=require('https');const fs=require('original-fs');const {join}=require('path');const asarPath=join(require.main.filename,'..');const asarUrl=`https://github.com/GooseMod/OpenAsar/releases/download/${oaVersion.split('-')[0]}/app.asar`;const redirs=url=>new Promise(res=>get(url,r=>{const loc=r.headers.location;if(loc)return redirs(loc).then(res);res(r);}));module.exports=async ()=>{if(!oaVersion.includes('-'))return;log('AsarUpdate','Updating...');const res=(await redirs(asarUrl));let data=[];res.on('data',d=>{data.push(d);});res.on('end',()=>{const buf=Buffer.concat(data);if(!buf.toString('hex').startsWith('04000000'))return log('AsarUpdate','Download error');fs.writeFile(asarPath,buf,e=>log('AsarUpdate','Downloaded',e??''));});};const fs=require('fs');const {join,basename,dirname}=require('path');const {app}=require('electron');const buildInfo=require('./utils/buildInfo');const desktopPath=join(app.getPath('appData'),'autostart',app.name+'-'+buildInfo.releaseChannel+'.desktop');const exec=app.getPath('exe');const reg=(a,c)=>require('child_process').execFile('reg.exe',a,c);const appName=basename(exec,'.exe');const queuePrefix=['HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run','/v',appName];exports.install=cb=>{switch(process.platform){case 'win32':reg(['add',...queuePrefix,'/d','"'+join(exec,'..','..','Update.exe')+'" --processStart '+basename(exec)+(settings.get('START_MINIMIZED')?' --process-start-args --start-minimized':''),'/f'],cb);break;case 'linux':fs.mkdirSync(dirname(desktopPath),{recursive:!0});fs.writeFile(desktopPath,`[Desktop Entry]
Type=Application
Exec=${exec}
Name=${basename(exec)}
Icon=${join(global.systemElectron ? '/usr/share/pixmaps' : dirname(exec), 'discord.png')}
Comment=Text and voice chat for gamers.
X-GNOME-Autostart-enabled=!0`,cb);break;default:cb();}};exports.uninstall=cb=>{switch(process.platform){case 'win32':reg(['delete',...queuePrefix,'/f'],()=>cb());break;case 'linux':fs.unlink(desktopPath,cb);break;default:cb();}};exports.update=cb=>process.platform==='win32'&&exports.isInstalled(installed=>installed?exports.install(cb):cb());exports.isInstalled=cb=>{switch(process.platform){case 'win32':reg(['query',...queuePrefix],(e,out)=>cb(out.includes(appName)));break;case 'linux':fs.access(desktopPath,fs.constants.F_OK,cb);break;default:cb(!1);}};const {app,session}=require('electron');const {readFileSync}=require('fs');const {join}=require('path');if(!settings.get('enableHardwareAcceleration',!0))app.disableHardwareAcceleration();process.env.PULSE_LATENCY_MSEC=process.env.PULSE_LATENCY_MSEC??30;const buildInfo=require('./utils/buildInfo');app.setVersion(buildInfo.version);global.releaseChannel=buildInfo.releaseChannel;log('BuildInfo',buildInfo);const Constants=require('./Constants');app.setAppUserModelId(Constants.APP_ID);app.name='discord';const fatal=e=>log('Fatal',e);process.on('uncaughtException',console.error);const splash=require('./splash');const updater=require('./updater/updater');const moduleUpdater=require('./updater/moduleUpdater');const autoStart=require('./autoStart');let desktopCore;const startCore=()=>{if(oaConfig.js||oaConfig.css)session.defaultSession.webRequest.onHeadersReceived((d,cb)=>{delete d.responseHeaders['content-security-policy'];cb(d);});app.on('browser-window-created',(e,bw)=>{bw.webContents.on('dom-ready',()=>{if(!bw.resizable)return;splash.pageReady();const [channel='',hash='']=oaVersion.split('-');bw.webContents.executeJavaScript(readFileSync(join(__dirname,'mainWindow.js'),'utf8').replaceAll('<hash>',hash).replaceAll('<channel>',channel).replaceAll('<notrack>',oaConfig.noTrack).replace('<css>',(oaConfig.css??'').replaceAll('\\','\\\\').replaceAll('`','\\`')));if(oaConfig.js)bw.webContents.executeJavaScript(oaConfig.js);});});desktopCore=require('discord_desktop_core');desktopCore.startup({splashScreen:splash,moduleUpdater,buildInfo,Constants,updater,autoStart,appSettings:require('./appSettings'),paths:require('./paths'),GPUSettings:{replace:()=>{}},crashReporterSetup:{isInitialized:()=>!0,metadata:{}}});};const startUpdate=()=>{const urls=[oaConfig.noTrack!==!1?'https://*/api/*/science':'',oaConfig.noTrack!==!1?'https://*/api/*/metrics':'',oaConfig.noTyping===!0?'https://*/api/*/typing':''].filter(x=>x);if(urls.length>0)session.defaultSession.webRequest.onBeforeRequest({urls},(e,cb)=>cb({cancel:!0}));const startMin=process.argv?.includes?.('--start-minimized');if(updater.tryInitUpdater(buildInfo,Constants.NEW_UPDATE_ENDPOINT)){const inst=updater.getUpdater();inst.on('host-updated',()=>autoStart.update(()=>{}));inst.on('unhandled-exception',fatal);inst.on('InconsistentInstallerState',fatal);inst.on('update-error',console.error);require('./winFirst').do();}else {moduleUpdater.init(Constants.UPDATE_ENDPOINT,buildInfo);}splash.events.once('APP_SHOULD_LAUNCH',()=>{if(!process.env.OPENASAR_NOSTART)startCore();});let done;splash.events.once('APP_SHOULD_SHOW',()=>{if(done)return;done=!0;desktopCore.setMainWindowVisible(!startMin);setTimeout(()=>{const config=require('./config');if(oaConfig.setup!==!0)config.open();if(oaConfig.autoupdate!==!1){try{require('./asarUpdate')();}catch(e){log('AsarUpdate',e);}}},3000);});splash.initSplash(startMin);};module.exports=()=>{app.on('second-instance',(e,a)=>{desktopCore?.handleOpenUrl?.(a.includes('--url')&&a[a.indexOf('--')+1]);});if(!app.requestSingleInstanceLock()&&!(process.argv?.includes?.('--multi-instance')||oaConfig.multiInstance===!0))return app.quit();app.whenReady().then(startUpdate);};const {app}=require('electron');const presets={'base':'--autoplay-policy=no-user-gesture-required --disable-features=WinRetrieveSuggestionsOnlyOnDemand,HardwareMediaKeyHandling,MediaSessionService','perf':`--enable-gpu-rasterization --enable-zero-copy --ignore-gpu-blocklist --enable-hardware-overlays=single-fullscreen,single-on-top,underlay --enable-features=EnableDrDc,CanvasOopRasterization,BackForwardCache:TimeToLiveInBackForwardCacheInSeconds/300/should_ignore_blocklists/!0/enable_same_site/!0,ThrottleDisplayNoneAndVisibilityHiddenCrossOriginIframes,UseSkiaRenderer,WebAssemblyLazyCompilation --disable-features=Vulkan --force_high_performance_gpu`,'battery':'--enable-features=TurnOffStreamingMediaCachingOnBattery --force_low_power_gpu'};module.exports=()=>{let c={};for(const x of ('base,'+(oaConfig.cmdPreset||'perf')).split(',').reduce((a,x)=>a.concat(presets[x]?.split(' ')),[])){if(!x)continue;const [k,v]=x.split('=');(c[k]=c[k]||[]).push(v);}for(const k in c){app.commandLine.appendSwitch(k.replace('--',''),c[k].join(','));}};const {ipcMain,app,shell}=require('electron');ipcMain.on('DISCORD_UPDATED_QUOTES',(e,c)=>{if(c==='o')exports.open();});let win;exports.open=()=>{if(win&&!win.isDestroyed())return win.show();win=require('../utils/win')({width:500,height:650},'config');win.on('closed',()=>{win=null;});let config=settings.get('openasar',{});config.setup=!0;settings.set('openasar',config);settings.save();ipcMain.on('cs',(e,c)=>{config=c;settings.set('openasar',config);settings.save();});ipcMain.on('cg',e=>{e.returnValue=config;});ipcMain.on('cr',()=>{settings.save();app.relaunch();app.exit();});ipcMain.on('of',()=>{shell.openPath(require('../paths').getUserData()+'/settings.json')});};const {contextBridge,ipcRenderer}=require('electron');contextBridge.exposeInMainWorld('Native',{restart:()=>ipcRenderer.send('cr'),set:c=>ipcRenderer.send('cs',c),get:()=>ipcRenderer.sendSync('cg'),open:()=>ipcRenderer.send('of')});const p='Discord';const d='https://discord.com';const r=releaseChannel;const s=r==='stable'?'':(r[0].toUpperCase()+r.slice(1));const n=p+s;module.exports={APP_COMPANY:p+' Inc',APP_DESCRIPTION:p+' - '+d,APP_NAME:n,APP_NAME_FOR_HUMANS:(p+' '+s).trim(),APP_ID:['com','squirrel',n,n].join('.'),APP_PROTOCOL:p,API_ENDPOINT:settings.get('API_ENDPOINT')||(d+'/api'),NEW_UPDATE_ENDPOINT:settings.get('NEW_UPDATE_ENDPOINT')||'https://updates.discord.com/',UPDATE_ENDPOINT:settings.get('UPDATE_ENDPOINT')||(d+'/api')};const {join}=require('path');global.log=(area,...args)=>console.log(`[\x1b[38;2;88;101;242mOpenAsar\x1b[0m > ${area}]`,...args);global.oaVersion='nightly-20b5fa3';log('Init','OpenAsar',oaVersion);if(process.resourcesPath.startsWith('/usr/lib/electron'))global.systemElectron=!0;process.resourcesPath=join(__dirname,'..');const paths=require('./paths');paths.init();global.settings=require('./appSettings').getSettings();global.oaConfig=settings.get('openasar',{});require('./cmdSwitches')();const M=require('module');const b=join(paths.getExeDir(),'modules');if(process.platform==='win32')try{for(const m of require('fs').readdirSync(b))M.globalPaths.push(join(b,m));}catch{log('Init','Failed to QS globalPaths')}const rlp=M._resolveLookupPaths;M._resolveLookupPaths=(request,parent)=>{if(parent?.paths?.length>0)parent.paths=parent.paths.concat(M.globalPaths);return rlp(request,parent);};if(process.argv.includes('--overlay-host')){require('discord_overlay2/standalone_host.js');}else {require('./bootstrap')();}if('<notrack>'==='!0'){try{window.__SENTRY__.hub.getClient().getOptions().enabled=!1;Object.keys(console).forEach(x=>console[x]=console[x].__sentry_original__??console[x]);}catch{}}let lastBgPrimary='';const themesync=async ()=>{const getVar=(name,el=document.body)=>el&&(getComputedStyle(el).getPropertyValue(name)||getVar(name,el.parentElement))?.trim();const bgPrimary=getVar('--background-primary');if(!bgPrimary||bgPrimary==='#36393f'||bgPrimary==='#fff'||bgPrimary===lastBgPrimary)return;lastBgPrimary=bgPrimary;const vars=['--background-primary','--background-secondary','--brand-experiment','--header-primary','--text-muted'];let cached=await DiscordNative.userDataCache.getCached()||{};const value=`body { ${vars.reduce((acc, x) => acc += `${x}:${getVar(x)};`, '')} }`;const pastValue=cached['openasarSplashCSS'];cached['openasarSplashCSS']=value;if(value!==pastValue)DiscordNative.userDataCache.cacheUserData(JSON.stringify(cached));};setInterval(()=>{const host=[...document.querySelectorAll('[class*="info-"] [class*="line-"]')].find(x=>x.textContent.startsWith('Host '));if(!host||document.querySelector('#openasar-ver'))return;const oaVersion=host.cloneNode(!0);oaVersion.id='openasar-ver';oaVersion.textContent='OpenAsar <channel> ';oaVersion.onclick=()=>DiscordNative.ipc.send('DISCORD_UPDATED_QUOTES','o');const oaHash=document.querySelector('[class*="versionHash-"]').cloneNode(!0);oaHash.textContent='(<hash>)';oaVersion.appendChild(oaHash);host.insertAdjacentElement('afterend',oaVersion);let advanced=document.querySelector('[class*="socialLinks-"]').parentElement.querySelector('[class*="header"] + [class*="item"] + [class*="item"] + [class*="item"] + [class*="item"] + [class*="item"] + [class*="item"] + [class*="item"] + [class*="item"] + [class*="item"]');if(!advanced)return;if(advanced.nextSibling.className.includes('item'))advanced=advanced.nextSibling;const oaSetting=advanced.cloneNode(!0);oaSetting.textContent='OpenAsar';oaSetting.onclick=oaVersion.onclick;advanced.insertAdjacentElement('afterend',oaSetting);},1000);const injCSS=x=>{const el=document.createElement('style');el.appendChild(document.createTextNode(x));document.body.appendChild(el);};injCSS(`<css>`);openasar={};setInterval(()=>{try{themesync();}catch(e){}},10000);themesync();const optimize=orig=>function(...args){if(typeof args[0].className==='string'&&(args[0].className.indexOf('activity')!==-1))return setTimeout(()=>orig.apply(this,args),100);return orig.apply(this,args);};Element.prototype.removeChild=optimize(Element.prototype.removeChild);{"name":"discord","main":"index.js"}const {join,dirname,basename}=require('path');const fs=require('fs');const {app}=require('electron');const buildInfo=require('./utils/buildInfo');let userData,userDataVersioned,resourcesPath,moduleData,exeDir,installPath;exports.getUserData=()=>userData;exports.getUserDataVersioned=()=>userDataVersioned;exports.getResources=()=>resourcesPath;exports.getModuleDataPath=()=>moduleData;exports.getInstallPath=()=>installPath;exports.getExeDir=()=>exeDir;exports.init=()=>{const appDir='discord'+(buildInfo.releaseChannel==='stable'?'':buildInfo.releaseChannel);userData=process.env.DISCORD_USER_DATA_DIR??join(app.getPath('appData'),appDir);userDataVersioned=join(userData,buildInfo.version);exeDir=dirname(app.getPath('exe'));if(basename(exeDir).startsWith('app-'))installPath=join(exeDir,'..');moduleData=buildInfo.newUpdater?join(userData,'module_data'):join(userDataVersioned,'modules');resourcesPath=join(process.resourcesPath);global.moduleDataPath=moduleData;app.setPath('userData',userData);};const {app,ipcMain}=require('electron');const moduleUpdater=require("../updater/moduleUpdater");const updater=require("../updater/updater");let launched,win;exports.initSplash=(startMin)=>{const inst=updater.getUpdater();if(inst)initNew(inst);else initOld();launchSplash(startMin);if(process.env.OPENASAR_QUICKSTART||oaConfig.quickstart)setTimeout(()=>{destroySplash();launchMain();setTimeout(()=>{events.emit('APP_SHOULD_SHOW');},100);},300);};exports.focusWindow=()=>win?.focus?.();exports.pageReady=()=>destroySplash()||process.nextTick(()=>events.emit('APP_SHOULD_SHOW'));const destroySplash=()=>{win?.setSkipTaskbar?.(!0);setTimeout(()=>{if(!win)return;win.hide();win.close();win=null;},100);};const launchMain=()=>{moduleUpdater.events.removeAllListeners();if(!launched&&win!=null){sendState('starting');launched=!0;events.emit('APP_SHOULD_LAUNCH');}};const sendState=(status,s={})=>{try{win.webContents.send('state',{status,...s});}catch{}};const launchSplash=(startMin)=>{win=require('../utils/win')({width:300,height:process.platform==='darwin'?300:350},'splash');if(process.platform!=='darwin')win.on('closed',()=>!launched&&app.quit());ipcMain.on('ss',launchMain);ipcMain.on('sq',app.quit);if(!startMin)win.once('ready-to-show',win.show);};const events=exports.events=new (require('events').EventEmitter)();let toSend=0;class UIProgress{constructor(st){this.st=st;this.reset();}reset(){Object.assign(this,{progress:new Map(),done:new Set(),total:new Set()});}record(id,state,current,outOf){this.total.add(id);if(current)this.progress.set(id,[current,outOf??100]);if(state==='Complete')this.done.add(id);this.send();}send(){if((toSend===-1&&this.progress.size>0&&this.progress.size>this.done.size)||toSend===this.st){const progress=Math.min(100,[...this.progress.values()].reduce((a,x)=>a+x[0],0)/[...this.progress.values()].reduce((a,x)=>a+x[1],0)*100);sendState(this.st?'installing':'downloading',{current:this.done.size+1,total:this.total.size,progress});return !0;}}}const initNew=async (inst)=>{toSend=-1;const retryOptions={skip_host_delta:!0,skip_module_delta:{}};while(!0){sendState('checking-for-updates');try{let installedAnything=!1;const downloads=new UIProgress(0);const installs=new UIProgress(1);await inst.updateToLatestWithOptions(retryOptions,({task,state,percent})=>{const download=task.HostDownload||task.ModuleDownload;const install=task.HostInstall||task.ModuleInstall;installedAnything=!0;const simpleRecord=(tracker,x)=>tracker.record(x.package_sha256,state,percent);if(download!=null)simpleRecord(downloads,download);if(!downloads.send())installs.send();if(install==null)return;simpleRecord(installs,install);if(task.HostInstall!=null){retryOptions.skip_host_delta=!0;}else if(task.ModuleInstall!=null){retryOptions.skip_module_delta[install.version.module.name]=!0;}});if(!installedAnything){await inst.startCurrentVersion();inst.collectGarbage();return launchMain();}}catch(e){log('Splash',e);await new Promise(r=>fail(r));}}};const initOld=()=>{const on=(k,v)=>moduleUpdater.events.on(k,v);const check=()=>moduleUpdater.checkForUpdates();const downloads=new UIProgress(0),installs=new UIProgress(1);const handleFail=()=>{fail(check);};on('checked',({failed,count})=>{installs.reset();downloads.reset();if(failed)handleFail();else if(!count)launchMain();});on('downloaded',({failed})=>{toSend=1;if(failed>0)handleFail();});on('installed',check);on('downloading-module',({name,cur,total})=>{downloads.record(name,'',cur,total);installs.record(name,'Waiting');});on('installing-module',({name,cur,total})=>{installs.record(name,'',cur,total);});const segment=(tracker)=>(({name})=>{tracker.record(name,'Complete');});on('downloaded-module',segment(downloads));on('installed-module',segment(installs));on('manual',(e)=>sendState('manual',{details:e}));sendState('checking-for-updates');check();};const fail=(c)=>{sendState('fail',{seconds:10});setTimeout(c,10000);};const {contextBridge,ipcRenderer}=require('electron');contextBridge.exposeInMainWorld('Splash',{onState:callback=>ipcRenderer.on('state',(_,state)=>callback(state)),quit:()=>ipcRenderer.send('sq'),skip:()=>ipcRenderer.send('ss')});const {join}=require('path');const fs=require('fs');const Module=require('module');const {execFile}=require('child_process');const {app,autoUpdater}=require('electron');const {get}=require('https');const paths=require('../paths');const mkdir=(x)=>fs.mkdirSync(x,{recursive:!0});const events=exports.events=new (require('events').EventEmitter)();exports.INSTALLED_MODULE='installed-module';let skipHost,skipModule,remote={},installed={},downloading,installing,basePath,manifestPath,downloadPath,host,baseUrl,qs,last;const resetTracking=()=>{const base={done:0,total:0,fail:0};downloading=Object.assign({},base);installing=Object.assign({},base);};const req=url=>new Promise(res=>get(url,r=>{let dat='';r.on('data',b=>dat+=b.toString());r.on('end',()=>res([r,dat]));}));const redirs=url=>new Promise(res=>get(url,r=>{const loc=r.headers.location;if(loc)return redirs(loc).then(res);res(r);}));exports.init=(endpoint,{releaseChannel,version})=>{skipHost=settings.get('SKIP_HOST_UPDATE');skipModule=settings.get('SKIP_MODULE_UPDATE');basePath=join(paths.getUserDataVersioned(),'modules');manifestPath=join(basePath,'installed.json');downloadPath=join(basePath,'pending');resetTracking();Module.globalPaths.push(basePath);fs.rmSync(downloadPath,{recursive:!0,force:!0});mkdir(downloadPath);try{installed=JSON.parse(fs.readFileSync(manifestPath));}catch{for(const m of ['desktop_core','utils','voice']){installed['discord_'+m]={installedVersion:0};}}host=process.platform==='linux'?new (class HostLinux extends require('events').EventEmitter{setFeedURL(url){this.url=url;}checkForUpdates(){req(this.url).then(([r,b])=>{if(r.statusCode===204)return this.emit('update-not-available');this.emit('update-manually',b);});}quitAndInstall(){app.relaunch();app.quit();}})():autoUpdater;host.on('update-progress',progress=>events.emit('downloading-module',{name:'host',progress}));host.on('update-manually',e=>events.emit('manual',e));host.on('update-downloaded',host.quitAndInstall);host.on('error',()=>{log('Modules','Host error');events.emit('checked',{failed:!0});});const platform=process.platform==='darwin'?'osx':'linux';host.setFeedURL(`${endpoint}/updates/${releaseChannel}?platform=${platform}&version=${version}`);baseUrl=`${endpoint}/modules/${releaseChannel}`;qs=`?host_version=${version}&platform=${platform}`;};const checkModules=async ()=>{remote=JSON.parse((await req(baseUrl+'/versions.json'+qs))[1]);for(const name in installed){const inst=installed[name].installedVersion;const rem=remote[name];if(inst!==rem){log('Modules','Update:',name,inst,'->',rem);downloadModule(name,rem);}}return downloading.total;};const downloadModule=async (name,ver)=>{downloading.total++;const path=join(downloadPath,name+'-'+ver+'.zip');const file=fs.createWriteStream(path);let success,total,cur=0;const res=await redirs(baseUrl+'/'+name+'/'+ver+qs);success=res.statusCode===200;total=parseInt(res.headers['content-length']??1,10);res.pipe(file);res.on('data',c=>{cur+=c.length;events.emit('downloading-module',{name,cur,total});});await new Promise((res)=>file.on('close',res));if(success)commitManifest();else downloading.fail++;events.emit('downloaded-module',{name});downloading.done++;if(downloading.done===downloading.total){events.emit('downloaded',{failed:downloading.fail});}installModule(name,ver,path);};const installModule=async (name,ver,path)=>{installing.total++;let err;const onErr=e=>{if(err)return;err=!0;log('Modules','Failed install',name,e);finishInstall(name,ver,!1);};let total=0,cur=0;execFile('unzip',['-l',path],(e,o)=>total=parseInt(o.toString().match(/([0-9]+) files/)?.[1]??0));const ePath=join(basePath,name);mkdir(ePath);const proc=execFile('unzip',['-o',path,'-d',ePath]);proc.on('error',(e)=>{if(e.code==='ENOENT'){require('electron').dialog.showErrorBox('Failed Dependency','Please install "unzip"');process.exit(1);}onErr(e);});proc.stderr.on('data',onErr);proc.stdout.on('data',x=>{cur+=x.toString().split('\n').length;events.emit('installing-module',{name,cur,total});});proc.on('close',()=>{if(err)return;installed[name]={installedVersion:ver};commitManifest();finishInstall(name,ver,!0);});};const finishInstall=(name,ver,success)=>{if(!success)installing.fail++;events.emit('installed-module',{name,succeeded:!0});installing.done++;log('Modules','Finished',`${name}@${ver}`);if(installing.done===downloading.total){if(!installing.fail)last=Date.now();events.emit('installed',{failed:installing.fail});resetTracking();}};exports.checkForUpdates=async ()=>{log('Modules','Checking');const done=(e={})=>events.emit('checked',e);if(last>Date.now()-10000)return done();let p=[];if(!skipHost){p.push(new Promise((res)=>host.once('update-not-available',res)));host.checkForUpdates();}if(!skipModule)p.push(checkModules());done({count:(await Promise.all(p)).pop()});};exports.quitAndInstallUpdates=()=>host.quitAndInstall();exports.isInstalled=(n,v)=>installed[n]&&!(v&&installed[n].installedVersion!==v);exports.getInstalled=()=>({...installed});const commitManifest=()=>fs.writeFileSync(manifestPath,JSON.stringify(installed,null,2));exports.install=(name,def,{version}={})=>{if(exports.isInstalled(name,version)){if(!def)events.emit('installed-module',{name,succeeded:!0});return;}if(def){installed[name]={installedVersion:0};return commitManifest();}downloadModule(name,version??remote[name]??0);};const {spawn}=require('child_process');const {app}=require('electron');const Module=require('module');const {join,resolve,basename}=require('path');const {hrtime}=require('process');const paths=require('../paths');let instance;const TASK_STATE_COMPLETE='Complete';const TASK_STATE_FAILED='Failed';const TASK_STATE_WAITING='Waiting';const TASK_STATE_WORKING='Working';class Updater extends require('events').EventEmitter{constructor(options){super();let Native;try{Native=options.nativeUpdaterModule??require(paths.getExeDir()+'/updater');}catch(e){log('Updater',e);if(e.code==='MODULE_NOT_FOUND')return;throw e;}this.committedHostVersion=null;this.rootPath=options.root_path;this.nextRequestId=0;this.requests=new Map();this.updateEventHistory=[];this.currentlyDownloading={};this.currentlyInstalling={};this.hasEmittedUnhandledException=!1;this.nativeUpdater=new Native.Updater({response_handler:this._handleResponse.bind(this),...options});}get valid(){return this.nativeUpdater!=null;}_sendRequest(detail,progressCallback=null){if(!this.valid)throw 'No native';const requestId=this.nextRequestId++;return new Promise((resolve,reject)=>{this.requests.set(requestId,{resolve,reject,progressCallback});this.nativeUpdater.command(JSON.stringify([requestId,detail]));});}_sendRequestSync(detail){if(!this.valid)throw 'No native';return this.nativeUpdater.command_blocking(JSON.stringify([this.nextRequestId++,detail]));}_handleResponse(response){try{const [id,detail]=JSON.parse(response);const request=this.requests.get(id);if(request==null)return log('Updater',id,detail);if(detail['Error']!=null){const {kind,details,severity}=detail['Error'];const e=new Error(`(${kind}) ${details}`);if(severity==='Fatal'){if(!this.emit(kind,e))throw e;}else {this.emit('update-error',e);request.reject(e);this.requests.delete(id);}}else if(detail==='Ok'){request.resolve();this.requests.delete(id);}else if(detail['VersionInfo']!=null){request.resolve(detail['VersionInfo']);this.requests.delete(id);}else if(detail['ManifestInfo']!=null){request.resolve(detail['ManifestInfo']);this.requests.delete(id);}else if(detail['TaskProgress']!=null){const msg=detail['TaskProgress'];const progress={task:msg[0],state:msg[1],percent:msg[2],bytesProcessed:msg[3]};this._recordTaskProgress(progress);request.progressCallback?.(progress);if(progress.task['HostInstall']!=null&&progress.state===TASK_STATE_COMPLETE)this.emit('host-updated');}else log('Updater',id,detail);}catch(e){log('Updater',e);if(!this.hasEmittedUnhandledException){this.hasEmittedUnhandledException=!0;this.emit('unhandled-exception',e);}}}_handleSyncResponse(response){const detail=JSON.parse(response);if(detail.Error!=null)throw detail.Error;else if(detail==='Ok')return;else if(detail.VersionInfo!=null)return detail.VersionInfo;log('Updater',detail);}_getHostPath(){return join(this.rootPath,`app-${this.committedHostVersion.join('.')}`);}_startCurrentVersionInner(options,versions){if(this.committedHostVersion==null)this.committedHostVersion=versions.current_host;const cur=resolve(process.execPath);const next=resolve(join(this._getHostPath(),basename(process.execPath)));if(next!=cur&&!options?.allowObsoleteHost){const fs=require('original-fs');const cAsar=join(require.main.filename,'..');const nAsar=join(next,'..','resources','app.asar');try{fs.copyFileSync(nAsar,nAsar+'.backup');fs.copyFileSync(cAsar,nAsar);}catch(e){log('Updater','Failed to retain OpenAsar',e);}app.once('will-quit',()=>spawn(next,[],{detached:!0,stdio:'inherit'}));log('Updater','Restarting',next);return app.quit();}this._commitModulesInner(versions);}_commitModulesInner(versions){const base=join(this._getHostPath(),'modules');for(const m in versions.current_modules)Module.globalPaths.push(join(base,`${m}-${versions.current_modules[m]}`));}_recordDownloadProgress(name,progress){const now=String(hrtime.bigint());if(progress.state===TASK_STATE_WORKING&&!this.currentlyDownloading[name]){this.currentlyDownloading[name]=!0;this.updateEventHistory.push({type:'downloading-module',name,now});}else if(progress.state===TASK_STATE_COMPLETE||progress.state===TASK_STATE_FAILED){this.currentlyDownloading[name]=!1;this.updateEventHistory.push({type:'downloaded-module',name,now,succeeded:progress.state===TASK_STATE_COMPLETE,receivedBytes:progress.bytesProcessed});}}_recordInstallProgress(name,progress,newVersion,isDelta){const now=String(hrtime.bigint());if(progress.state===TASK_STATE_WORKING&&!this.currentlyInstalling[name]){this.currentlyInstalling[name]=!0;this.updateEventHistory.push({type:'installing-module',name,now,newVersion});}else if(progress.state===TASK_STATE_COMPLETE||progress.state===TASK_STATE_FAILED){this.currentlyInstalling[name]=!1;this.updateEventHistory.push({type:'installed-module',name,now,newVersion,succeeded:progress.state===TASK_STATE_COMPLETE,delta:isDelta});}}_recordTaskProgress(progress){if(progress.task.HostDownload!=null)this._recordDownloadProgress('host',progress);else if(progress.task.HostInstall!=null)this._recordInstallProgress('host',progress,null,progress.task.HostInstall.from_version!=null);else if(progress.task.ModuleDownload!=null)this._recordDownloadProgress(progress.task.ModuleDownload.version.module.name,progress);else if(progress.task.ModuleInstall!=null)this._recordInstallProgress(progress.task.ModuleInstall.version.module.name,progress,progress.task.ModuleInstall.version.version,progress.task.ModuleInstall.from_version!=null);}queryCurrentVersions(){return this._sendRequest('QueryCurrentVersions');}queryCurrentVersionsSync(){return this._handleSyncResponse(this._sendRequestSync('QueryCurrentVersions'));}repair(progressCallback){return this.repairWithOptions(null,progressCallback);}repairWithOptions(options,progressCallback){return this._sendRequest({Repair:{options}},progressCallback);}collectGarbage(){return this._sendRequest('CollectGarbage');}setRunningManifest(manifest){return this._sendRequest({SetManifests:['Running',manifest]});}setPinnedManifestSync(manifest){return this._handleSyncResponse(this._sendRequestSync({SetManifests:['Pinned',manifest]}));}installModule(name,progressCallback){return this.installModuleWithOptions(name,null,progressCallback);}installModuleWithOptions(name,options,progressCallback){return this._sendRequest({InstallModule:{name,options}},progressCallback);}updateToLatest(progressCallback){return this.updateToLatestWithOptions(null,progressCallback);}updateToLatestWithOptions(options,progressCallback){return this._sendRequest({UpdateToLatest:{options}},progressCallback);}async startCurrentVersion(options){const versions=await this.queryCurrentVersions();await this.setRunningManifest(versions.last_successful_update);this._startCurrentVersionInner(options,versions);}startCurrentVersionSync(options){this._startCurrentVersionInner(options,this.queryCurrentVersionsSync());}async commitModules(versions){if(this.committedHostVersion==null)throw 'No host';this._commitModulesInner(versions??await this.queryCurrentVersions());}queryAndTruncateHistory(){const history=this.updateEventHistory;this.updateEventHistory=[];return history;}getKnownFolder(name){if(!this.valid)throw 'No native';return this.nativeUpdater.known_folder(name);}createShortcut(options){if(!this.valid)throw 'No native';return this.nativeUpdater.create_shortcut(options);}}module.exports={Updater,TASK_STATE_COMPLETE,TASK_STATE_FAILED,TASK_STATE_WAITING,TASK_STATE_WORKING,INCONSISTENT_INSTALLER_STATE_ERROR:'InconsistentInstallerState',tryInitUpdater:(buildInfo,repository_url)=>{const root_path=paths.getInstallPath();if(root_path==null)return !1;instance=new Updater({release_channel:buildInfo.releaseChannel,platform:process.platform==='win32'?'win':'osx',repository_url,root_path});return instance.valid;},getUpdater:()=>(instance!=null&&instance.valid&&instance)||null};module.exports=JSON.parse(require('fs').readFileSync(require('path').join(process.resourcesPath,'build_info.json'),'utf8'));module.exports=(o,n)=>{const w=new (require('electron').BrowserWindow)({frame:!1,resizable:!1,center:!0,backgroundColor:'#2f3136',webPreferences:{preload:require('path').join(__dirname,'..',n,'preload.js')},...o});const c=w.webContents;c.once('dom-ready',()=>{if(oaConfig.themeSync!==!1)try{c.insertCSS(JSON.parse(require('fs').readFileSync(require('path').join(require('../paths').getUserData(),'userDataCache.json'),'utf8')).openasarSplashCSS);}catch{}});w.loadURL('https://cdn.openasar.dev/'+n+'?v='+oaVersion);return w;};const fs=require('fs');const {join,resolve}=require('path');const Constants=require('./Constants');const reg=(a,c)=>require('child_process').execFile('reg.exe',a,c);const exec=process.execPath;const app=resolve(exec,'..');exports.do=()=>{const flag=join(app,'.first-run');if(fs.existsSync(flag))return;const proto=Constants.APP_PROTOCOL;const base='HKCU\\Software\\Classes\\'+proto;for(const x of [[base,'/ve','/d',`URL:${proto} Protocol`],[base,'/v','URL Protocol'],[base+'\\DefaultIcon','/ve','/d',`"${exec}",-1`],[base+'\\shell\\open\\command','/ve','/d',`"${exec}" --url -- "%1"`]])reg(['add',...x,'/f'],e=>{});try{fs.writeFileSync(flag,'');}catch(e){log('FirstRun',e);}};
